services:
  # --- Application Services ---
  redis:
    image: redis:7-alpine
    # In production, you wouldn't typically expose the Redis port to the public internet.
    # The other containers can still talk to it over the internal Docker network.
    # ports:
    #   - "6379:6379"
    restart: always

  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    ports:
      # We expose port 8000 for external traffic
      - "8000:8000"
    # VOLUMES REMOVED: The code is now baked into the image. No hot-reloading needed.
    # volumes:
    #   - ./backend:/code/app
    env_file:
      - .env
    # COMMAND CHANGED: We use a production-grade server like Gunicorn instead of Uvicorn's dev server.
    # The '--reload' flag is removed.
    command: python -m gunicorn -w 4 -k uvicorn.workers.UvicornWorker main:app --bind 0.0.0.0:8000
    restart: always
    depends_on:
      - redis

  worker:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    # VOLUMES REMOVED: The worker also uses the code baked into the image.
    # volumes:
    #   - ./backend:/code/app
    env_file:
      - .env
    command: python -m celery -A celery_worker.celery worker --loglevel=info
    restart: always
    depends_on:
      - redis
      - backend

  frontend:
    build:
      context: .
      # We would use a multi-stage Dockerfile that builds the static files
      # and serves them with a production server like Nginx.
      dockerfile: ./frontend/Dockerfile.prod
    ports:
      # The production frontend is served on the standard HTTP port 80.
      - "80:80"
    # VOLUMES REMOVED: The static files are baked into the image.
    # volumes:
    #   - ./frontend:/app
    #   - /app/node_modules
    restart: always
    depends_on:
      - backend